================================================================================PROJECT SETUP GUIDE================================================================================This README provides step-by-step instructions to set up and run the Tyler Technologies project using Docker Compose. The stack includes an API service, a SQL Server database, and a client UI.--------------------------------------------------------------------------------TABLE OF CONTENTS--------------------------------------------------------------------------------- Prerequisites- Getting Started- Project Structure- Configuration- Running the Application- Accessing Services- Troubleshooting- Important Notes--------------------------------------------------------------------------------PREREQUISITES--------------------------------------------------------------------------------1. Docker: https://docs.docker.com/get-docker/2. Docker Compose: https://docs.docker.com/compose/install/--------------------------------------------------------------------------------GETTING STARTED--------------------------------------------------------------------------------1. VERIFY FILE STRUCTURE----------------------------------------- API Dockerfile must exist at: ./TylerTechnologies.Api/Dockerfile- Client Dockerfile must exist at: ../enerGov/Dockerfile (relative to project root)--------------------------------------------------------------------------------CONFIGURATION--------------------------------------------------------------------------------ENVIRONMENT VARIABLES----------------------------------------SQL Server:- Password: DMWZgnPIw4ekq0ki90I9 - Port: 14333 (host) -> 1433 (container)API:- Connection string uses internal DNS: sql_server_container- Port: 8080 (host) -> 80 (container)Client:- Port: 4200 (host) -> 801 (container)--------------------------------------------------------------------------------RUNNING THE APPLICATION--------------------------------------------------------------------------------1. START THE STACK----------------------------------------From TylerTechnologies folder root (where compose.yml is located):docker-compose up --buildStartup order:1. SQL Server container starts first2. API starts after database is ready3. Client starts last--------------------------------------------------------------------------------ACCESSING SERVICES--------------------------------------------------------------------------------SERVICE ENDPOINTS:- API:          http://localhost:8080- SQL Server:   localhost,14333- Client (UI):  http://localhost:4200CONNECTING TO SQL SERVER:- Use database tools (Azure Data Studio, SSMS, etc.)- Server:   localhost,14333- Username: sa- Password: DMWZgnPIw4ekq0ki90I9--------------------------------------------------------------------------------TROUBLESHOOTING--------------------------------------------------------------------------------1. Port Conflicts:   - Ensure ports 8080/14333/4200 are available2. API Database Connection Failures:   - Verify SQL container is running: docker ps   - Check connection string: Server=sql_server_container   - View SQL logs: docker logs sql_server_container3. Client Connection Issues:   - Confirm API container is running   - Check client network configuration4. Build Errors:   - Verify Dockerfile paths are correct   - Force rebuild: docker-compose build --no-cache--------------------------------------------------------------------------------IMPORTANT NOTES--------------------------------------------------------------------------------STOPPING THE STACK:docker-compose down(Add -v to delete volumes and database data)PERSISTING DATABASE DATA:Modify docker-compose.yml to add volumes:services:  sql-server:    volumes:      - sql_data:/var/opt/mssqlvolumes:  sql_data:UPDATING SERVICES:Rebuild specific components (e.g. API):docker-compose up --build api